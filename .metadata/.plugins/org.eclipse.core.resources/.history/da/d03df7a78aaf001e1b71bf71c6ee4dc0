package com.boardproject.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.Array;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import org.springframework.dao.DuplicateKeyException;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.boardproject.dto.BoardDTO;
import com.boardproject.dto.CommentDTO;
import com.boardproject.dto.FileDTO;
import com.boardproject.dto.MemberDTO;
import com.boardproject.mapper.CommentMapper;
import com.boardproject.service.BoardService;
import com.boardproject.service.CommentService;
import com.boardproject.service.MemberService;
import com.boardproject.vo.PaggingVO;

import ch.qos.logback.core.model.Model;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@Controller
public class MainController {
	
	private BoardService boardservice;
	private MemberService memberservice;
	private CommentService commentservice;
	
	
	public MainController(BoardService boardservice, MemberService memberservice, CommentService commentservice) {
		this.boardservice = boardservice;
		this.memberservice = memberservice;
		this.commentservice = commentservice;
	}


	@RequestMapping("/")
	public String index() {
		return "login";
	}
	
	
	@RequestMapping("/login")
	public String login(String id, String passwd, HttpSession session) {
		//로그인 처리
		
		MemberDTO member=memberservice.login(id,passwd);
		if(member==null) {
			return "redirect:/";

		}
		//게시판 가져오기
		session.setAttribute("login", true);
		session.setAttribute("member", member);

		return "redirect:/main";
		
		
		
	}
	
	@RequestMapping("/main")
	public ModelAndView mainview(ModelAndView view,@RequestParam(name="pageNo",defaultValue = "1") int pageNo ,
			@RequestParam(name="contentCount",defaultValue = "15") int contentCount) {
		//현재 페이지 번호를 받음, 만약 페이지 번호가 없으면 1로 고정해서 처리
		
				
		//전체 게시글 개수
		int count=boardservice.selectboardcount();
		

		//게시글 목록-페이지 번호를 이용해서 뽑음
		List<BoardDTO> list = boardservice.selectAllboard(pageNo,contentCount);
		
		//PaggingVO 생성,  request 영역에 저장'
		PaggingVO pagging =new PaggingVO(count, pageNo, contentCount, 4);
		view.addObject("pagging", pagging);
		view.addObject("list", list);
		view.setViewName("main");
		return view;
	}
	
	@RequestMapping("/board/{bno}")
	public ModelAndView boardcontent(ModelAndView view, @PathVariable(name="bno") int bno) {
		//게시글 내용 가져오기
		BoardDTO dto=boardservice.selectboardcontent(bno);
		List<CommentDTO> list=commentservice.getcomment(bno);
		List<FileDTO> filelist=boardservice.getfilelist(bno);
 		System.out.println(dto.toString());
 		view.addObject("filelist", filelist);
		view.addObject("list", list);
		view.addObject("board", dto);
		view.setViewName("board_view");
		return view;
	}
	
	@PostMapping("/board/comment")
	public String boardComment(CommentDTO comment, HttpSession session) {
		//댓글 db에 저장
		System.out.println(comment);
		MemberDTO member=(MemberDTO)session.getAttribute("member");
		comment.setWriter(member.getId());
		
		//db에 저장
		int result =commentservice.registercomment(comment);
		return "redirect:/board/"+comment.getBno();
	}
	
	@RequestMapping("/board/like")
	public ResponseEntity<String> boardlike(int bno, HttpSession session) {
		MemberDTO dto= (MemberDTO) session.getAttribute("member");
		HashMap<String, Object> map= new HashMap<String,Object>();
		try {
			boardservice.boardlikeup(dto.getId(),bno);
			map.put("msg","해당 게시글에 좋아요를 하셨습니다.");
			
		}catch(Exception e){
			//이미 좋아요 처리가 된 경우이기 때문에 해당 데이터를 삭제해서 좋아요 처리를 해제
			boardservice.boardlikedown(dto.getId(),bno);
			map.put("msg","해당 게시글에 좋아요를 취소 하셨습니다.");
		}
		//해당 게시글 좋아요 개수 받아옴
		int count=boardservice.boardtotallike(bno);
		map.put("count",count);
		return new ResponseEntity(map,HttpStatusCode.valueOf(HttpStatus.OK.value()));
		
	}
	@RequestMapping("/board/hate")
	public ResponseEntity<String> boardhate(int bno, HttpSession session) {
		MemberDTO dto= (MemberDTO) session.getAttribute("member");
		HashMap<String, Object> map= new HashMap<String,Object>();
		try {
			boardservice.boardhateup(dto.getId(),bno);
			map.put("msg","해당 게시글에 싫어요를 하셨습니다.");
			
		}catch(Exception e){
			//이미 좋아요 처리가 된 경우이기 때문에 해당 데이터를 삭제해서 좋아요 처리를 해제
			boardservice.boardhatedown(dto.getId(),bno);
			map.put("msg","해당 게시글에 싫어요를 취소 하셨습니다.");
		}
		//해당 게시글 좋아요 개수 받아옴
		int count=boardservice.boardtotalhate(bno);
		map.put("count",count);
		return new ResponseEntity(map,HttpStatusCode.valueOf(HttpStatus.OK.value()));
		
	}
	@RequestMapping("/board/comment/like")
	public ResponseEntity<String> commentlike(int cno, HttpSession session) {
		MemberDTO dto= (MemberDTO) session.getAttribute("member");
		HashMap<String, Object> map= new HashMap<String,Object>();
		try {
			commentservice.commentlikeup(dto.getId(),cno);
			map.put("msg","해당 댓글에 좋아요를 하셨습니다.");
			
		}catch(Exception e){
			//이미 좋아요 처리가 된 경우이기 때문에 해당 데이터를 삭제해서 좋아요 처리를 해제
			commentservice.commentlikedown(dto.getId(),cno);
			map.put("msg","해당 댓글에 좋아요를 취소 하셨습니다.");
		}
		//해당 게시글 좋아요 개수 받아옴
		int count=commentservice.commenttotallike(cno);
		map.put("count",count);
		return new ResponseEntity(map,HttpStatusCode.valueOf(HttpStatus.OK.value()));
		
	}
	@RequestMapping("/board/comment/hate")
	public ResponseEntity<String> commenthate(int cno, HttpSession session) {
		MemberDTO dto= (MemberDTO) session.getAttribute("member");
		HashMap<String, Object> map= new HashMap<String,Object>();
		try {
			commentservice.commenthateup(dto.getId(),cno);
			map.put("msg","해당 댓글에 싫어요를 하셨습니다.");
			
		}catch(Exception e){
			//이미 좋아요 처리가 된 경우이기 때문에 해당 데이터를 삭제해서 좋아요 처리를 해제
			commentservice.commenthatedown(dto.getId(),cno);
			map.put("msg","해당 댓글에 싫어요를 취소 하셨습니다.");
		}
		//해당 게시글 좋아요 개수 받아옴
		int count=commentservice.commenttotalhate(cno);
		map.put("count",count);
		return new ResponseEntity(map,HttpStatusCode.valueOf(HttpStatus.OK.value()));
		
	}
	
	@RequestMapping("/board/write/view")
	public String boardWriteView() {
		return "board_write";
	}
	
	@PostMapping("/board/write")
	public String boardWrite(BoardDTO board, HttpSession session, MultipartFile[] file) {
//		System.out.println(board);
		MemberDTO member =(MemberDTO)session.getAttribute("member");
		board.setWriter(member.getId());
		int bno1 = 0;
		//파일 업로드 할 경로
		File root=new File("c:\\fileupload");
		if(!root.exists())
			root.mkdirs();
		
		//2024_01_10_10_33_24 calender , simpledateformat
		
		Calendar cd= Calendar.getInstance();
		SimpleDateFormat sdf=new SimpleDateFormat("YYYY_MM_DD_HH_mm_ss");
		String date=sdf.format(cd.getTime());
		try {
			ArrayList<FileDTO>	 list=new ArrayList<FileDTO>();
			
			for(int i=0; i<file.length; i++) {
				//서버에 파일을 저장할때는 파일명 날짜시간으로 변경 <--저장할 파일명 규칙
				// DB에 저장할 때는 원본 파일명과 변경된 파일명 모두 저장
				//원본 파일명
				
				if(file[i].getSize()==0)
					continue;
				//실제 파일을 저장하는 부분
				File f= new File(root,file[i].getOriginalFilename());
				file[i].transferTo(f);// 실제 파일 저장하는 부분
				//list에 파일 정보 한건씩  추가
				list.add(new FileDTO(0,i,f.getAbsolutePath()));
				
			}
			//게시글 DB에 등록
			// 1.게시글 번호를 생성해서 받아옴
			int bno = boardservice.selectBoardNo();
			bno1=bno;
			board.setBno(bno);
			
			// 2.boradDTO에 게시글 번호 저장 후 DB에 저장
			boardservice.insertBoard(board);
		
			//파일 정보를 DB에 저장
			list.forEach((e)->e.setBno(bno));
			boardservice.insertFile(list);
				
			} catch (IllegalStateException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
		return "redirect:/board/"+bno1;
	}
	
	@RequestMapping("/file/down")
	public void filedownload(int bno, int fno, HttpServletResponse response) {
		//파일 정보 읽어옴
		FileDTO dto =boardservice.selectfile(bno, fno);
		File file=new File(dto.getPath());
		
		//출력 스트림 연결 데이터를 전송
		response.setHeader("Content-Disposition", "attachment;filename="+file.getName());
		response.setHeader("Content-Transfer-Encoding", "binary");
		response.setContentLength((int)file.length());
		
		//사용자한테 보내주기
		try {
			BufferedOutputStream bos=new BufferedOutputStream(response.getOutputStream());
			FileInputStream fis=new FileInputStream(file);
			byte[] buffer=new byte[1024*1024];
			while (true) {
				int count =fis.read(buffer);
				if(count==-1)break;
				bos.write(buffer,0,count);
				bos.flush();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@RequestMapping("/editer/upload")
	public ResponseEntity<String> editerFileUpload(MultipartFile upload){
		//파일 업로드할 경로 설정
		HashMap<String, Object> map =new HashMap<String,Object>();
		File root=new File("c:\\resource.upload");
		if(!root.exists())
			root.mkdirs();
		try {
			Calendar cd= Calendar.getInstance();
			SimpleDateFormat sdf=new SimpleDateFormat("YYYY_MM_DD_HH_mm_ss");
			String date=sdf.format(cd.getTime());
			//원본 파일명
			String originFileName=upload.getOriginalFilename();
			//저장할 파일명
			String fileName=date+"_"+originFileName.substring(originFileName.lastIndexOf('.'));
			File f= new File(root,fileName);
			upload.transferTo(f);
			
			int fno=boardservice.selectImageFileNo();
			boardservice.insertImageFile(new FileDTO(0, fno, f.getAbsolutePath()));
			map.put("uploaded",true);
			map.put("url", "/editer/filedown?fno="+fno);
			
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
			map.put("uploaded",false);
			map.put("message", "파일 업로드 중 에러 발생");
			return new ResponseEntity(map,HttpStatus.INTERNAL_SERVER_ERROR);
			
		}// 실제 파일 저장하는 부분
		return new ResponseEntity(map,HttpStatus.OK);
	}
	
	@RequestMapping("/editer/filedown")
	public void imageFileDownload(int fno, HttpServletResponse response) {
		//파일 정보 읽어옴
		FileDTO dto = boardservice.selectImageFile(fno);
		File file = new File(dto.getPath());

		// 출력 스트림 연결 데이터를 전송
		response.setHeader("Content-Disposition", "attachement;fileName=" + file.getName());
		response.setHeader("Content-Transfer-Encoding", "binary");
		response.setContentLength((int) file.length());

		try (BufferedOutputStream bos = new BufferedOutputStream(response.getOutputStream());
				FileInputStream fis = new FileInputStream(file);) {
			byte[] buffer = new byte[1024 * 1024];

			while (true) {
				int count = fis.read(buffer);
				if (count == -1)
					break;
				bos.write(buffer, 0, count);
				bos.flush();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
}
